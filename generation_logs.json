[
  {
    "timestamp": "2025-06-08T08:53:42.533487",
    "prompt": "create a script that generates a spinning cube",
    "script": ""
  },
  {
    "timestamp": "2025-06-08T08:58:21.890212",
    "prompt": "create a script for a spinning cube",
    "script": "Here's a complete Blender Python script that creates a spinning cube with animation and proper cleanup:\n\n```python\n\"\"\"\nSpinning Cube Generator\nCreates a cube with continuous rotation animation\nand handles cleanup of temporary objects.\n\"\"\"\n\nimport bpy\nfrom mathutils import Euler\n\nclass SpinningCubeOperator(bpy.types.Operator):\n    \"\"\"Operator to create and animate a spinning cube\"\"\"\n    bl_idname = \"object.create_spinning_cube\"\n    bl_label = \"Create Spinning Cube\"\n    bl_options = {'REGISTER', 'UNDO'}\n\n    def execute(self, context):\n        # Check if cube already exists\n        if \"SpinningCube\" in bpy.data.objects:\n            self.report({'WARNING'}, \"Cube already exists\")\n            return {'CANCELLED'}\n\n        # Create cube\n        bpy.ops.mesh.primitive_cube_add(\n            size=1.0,\n            location=(0, 0, 0),\n            name=\"SpinningCube\"\n        )\n\n        # Get reference to created cube\n        cube = bpy.context.active_object\n\n        # Set material\n        material = bpy.data.materials.new(name=\"CubeMaterial\")\n        material.use_nodes = True\n        material.diffuse_color = (0.5, 0.7, 0.3, 1.0)  # Green color\n        cube.data.materials.append(material)\n\n        # Configure rotation animation\n        cube.rotation_mode = 'EULER'\n        \n        # Set initial rotation and keyframe\n        start_frame = 1\n        end_frame = 100\n        \n        # Insert keyframes at start and end of animation range\n        for frame in [start_frame, end_frame]:\n            cube.rotation_euler = Euler((0.5 * frame % 4, 0, 0))\n            cube.keyframe_insert('rotation_euler', frame=frame)\n\n        # Set continuous looping by extending timeline\n        scene = context.scene\n        scene.frame_end = end_frame + (end_frame - start_frame)\n        \n        # Optional: Add render settings\n        scene.render.fps = 24\n        scene.render.resolution_x = 1920\n        scene.render.resolution_y = 1080\n\n        return {'FINISHED'}\n\n# Register and unregister functions\ndef register():\n    bpy.utils.register_class(SpinningCubeOperator)\n\ndef unregister():\n    bpy.utils.unregister_class(SpinningCubeOperator)\n\nif __name__ == \"__main__\":\n    register()\n\n    # Example usage:\n    # bpy.ops.object.create_spinning_cube()\n```\n\nKey features of this script:\n\n1. **Proper Object Creation**:\n   - Checks if cube already exists before creation\n   - Uses primitive_cube_add() for standard geometry\n\n2. **Animation System**:\n   - Creates Euler rotation animation from frame 1 to frame 100\n   - Sets continuous looping by extending timeline\n   - Keyframe interpolation is maintained by default (constant)\n\n3. **Material Setup**:\n   - Creates simple green material with Principled Shader\n   - Material is linked directly to the object data\n\n4. **Best Practices**:\n   - Uses proper operator pattern for undo support\n   - Includes error handling and warnings\n   - Follows Blender naming conventions (camelCase)\n   - Implements register/unregister for proper addon handling\n\n5. **Performance Considerations**:\n   - Only creates one object per execution\n   - Uses efficient keyframe insertion method\n\nTo use this script:\n1. Open Blender's Scripting workspace\n2. Switch to Object mode\n3. Run the script or call bpy.ops.object.create_spinning_cube()\n4. The cube will animate automatically once you play the timeline\n\nThe script creates a visually pleasing spinning cube with smooth rotation animation and proper lighting through the default Principled Shader material."
  },
  {
    "timestamp": "2025-06-08T09:01:45.656432",
    "prompt": "Create script that is a spinning cube",
    "script": "```python\nimport bpy\nimport math\n\ndef create_spinning_cube():\n    \"\"\"Create a spinning cube animation in Blender\"\"\"\n    try:\n        # Remove existing cube"
  },
  {
    "timestamp": "2025-06-08T09:03:46.562893",
    "prompt": "create a script of a spinning cube",
    "script": "```python\nimport bpy\nimport math\nfrom typing import Optional\n\n\ndef create_spinning_cube(cube_name: str = \"SpinningCube\", \n                         location: tuple[float, float, float] = (0.0, 0.0, 0.0),\n                         size: float = 2.0) -> Optional[bpy.types.Object]:\n    \"\"\"\n    Creates a cube and sets up a driver to make it spin around the Z-axis.\n\n    Args:\n        cube_name: The name of the cube object.\n        location: The location of the cube in 3D space (x, y, z).\n        size: The size (edge length) of the cube.\n\n    Returns:\n        The created cube object if successful, otherwise None.\n    \"\"\"\n    try:\n        # Create a new cube\n        bpy.ops.mesh.primitive_cube_add(size=size, location=location)\n        cube_object: bpy.types.Object = bpy.context.object\n        cube_object.name = cube_name\n\n        # Add a driver to the Z rotation\n        cube_object.rotation_mode = 'XYZ'  # Ensure rotation mode is set\n\n        # Create the driver\n        driver = cube_object.driver_add(\"rotation_euler\", 2).driver  # 2 corresponds to Z rotation\n\n        # Set the driver type to scripted expression\n        driver.type = 'SCRIPTED'\n\n        # Set the expression to control the rotation\n        driver.expression = 'frame * 0.02'\n\n        return cube_object\n\n    except Exception as e:\n        print(f\"Error creating spinning cube: {e}\")\n        return None\n\n\ndef cleanup_existing_cube(cube_name: str = \"SpinningCube\") -> None:\n    \"\"\"\n    Deletes an existing cube with the given name if it exists.\n\n    Args:\n        cube_name: The name of the cube to delete.\n    \"\"\"\n    try:\n        existing_cube: Optional[bpy.types.Object] = bpy.data.objects.get(cube_name)\n        if existing_cube:\n            bpy.data.objects.remove(existing_cube, do_unlink=True)\n    except Exception as e:\n        print(f\"Error cleaning up existing cube: {e}\")\n\n\nif __name__ == \"__main__\":\n    # Example usage:\n    cube_name = \"SpinningCube\"\n    cleanup_existing_cube(cube_name)\n    cube = create_spinning_cube(cube_name=cube_name, location=(0.0, 0.0, 0.0), size=2.0)\n\n    if cube:\n        print(f\"Successfully created spinning cube: {cube.name}\")\n    else:\n        print(\"Failed to create spinning cube.\")\n\n```"
  }
]